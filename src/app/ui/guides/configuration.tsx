import React from 'react'
import CodeExample from '../code-example'

export default function GuidesConfiguration() {
  return (
    <React.Fragment>
      <h2 id="configuration">Configuration</h2>

      <p>
        Configuration for psychic is spread out through several files, and is organized for ease of
        understanding.
      </p>

      <h3 id="configuration-express">Express</h3>

      <CodeExample
        id="configuration-express"
        expandLevel={2}
        description={
          <p>
            Since we are just using express under the hood to provide our web server, we expose configurations
            for you to get in and out with ease, adding whichever custom express plugins you need before app
            boot. All express configuration files are located in `conf/env`.
          </p>
        }
        codeExample={`\
// app
//   conf
//     env
//       all.ts
//       dev.ts
//       staging.ts
//       prod.ts
//       testing.ts
//     ws
//       connect.ts
//       start.ts
//     app.yml
//     client.ts
//     cors.ts
//     dream.ts
//     inflections.ts
//     redis.ts
//     repl.ts
//     routes.ts
//     server.ts
`}
      ></CodeExample>

      <h3 id="configuration-dream">Dream</h3>

      <CodeExample
        id="configuration-dream-example"
        expandLevel={2}
        description={
          <p>
            Since dream is an independent library that is imported by psychic, we expose configuration for you
            which allows dream to understand what your database credentials are. To do this, the dream library
            uses a few files. One of them, auto-generated by psychic when you create a new app, lives at the
            root of your application, and is called .dream.yml
          </p>
        }
        language="yml"
        codeExample={`\
// .dream.yml
models_path: 'test-app/app/models'
migrations_path: 'test-app/db/migrations'
associations_path: 'test-app/db/associations.ts'
schema_path: 'test-app/db/schema.ts'
dream_config_path: 'test-app/conf/dream.ts'
`}
      ></CodeExample>

      <CodeExample
        id="configuration-dream-example-2"
        expandLevel={2}
        description={
          <p>
            The second configuration for dream is exposed at conf/dream.ts, and this is used to explicitly
            assign database credentials, generally from environment vars.
          </p>
        }
        codeExample={`\
// conf/dream.ts
export default {
  db: {
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    name: process.env.DB_NAME,
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
  },
}
`}
      ></CodeExample>

      <h3 id="configuration-routing">Dream</h3>

      <CodeExample
        id="configuration-routing-example"
        expandLevel={2}
        description={
          <p>
            In addition to configuration for building your express app, a separate configuration file is
            provided to configure the routing mechanism provided by psychic. This file is located at
            `conf/routes.ts`.
          </p>
        }
        codeExample={`\
// conf/routes.ts
import { PsychicRouter } from 'psychic'

export default (r: PsychicRouter) => {
  r.namespace('api', r => {
    r.get('ping', 'users#ping') // points to the app/controllers/api/users.ts file’s ping method

    r.namespace('v1', r => {
      r.get('ping', 'users#ping') // points to the app/controllers/api/v1/users.ts file’s ping method
    })
  })
}

`}
      ></CodeExample>

      <h3 id="configuration-ws">Web Sockets</h3>
      <CodeExample
        id="configuration-ws-example"
        expandLevel={2}
        description={
          <p>
            2 configuration files are provided for configuring your websockets layer. the `conf/ws/start.ts`
            file will be run whenever your server starts up. Conversely, the `conf/ws/connect.ts` file will be
            run whenever a user connects via websocket to your system.
          </p>
        }
        codeExample={`\
// conf/ws/start.ts

import { Server as SocketServer } from 'socket.io'

// this is called once per each express boot

export default async (server: SocketServer) => {}

`}
      ></CodeExample>

      <h3 id="configuration-redis">Redis</h3>
      <CodeExample
        id="configuration-redis-example"
        expandLevel={2}
        description={
          <p>Additionally, a redis configuration is passed to connect to the underlying redis library.</p>
        }
        codeExample={`\
// conf/redis.ts

export default async () => {
  const user = process.env.REDIS_USER || undefined
  const password = process.env.REDIS_PASSWORD || undefined
  const host = process.env.REDIS_HOST || 'localhost'
  const port = process.env.REDIS_PORT || ''
  // const protocol = process.env.REDIS_PROTOCOL || 'redis'

  return {
    user,
    password,
    host,
    port,
  }
}
`}
      ></CodeExample>
    </React.Fragment>
  )
}
